name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags like v1.0.0, v2.1.3, etc.
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  build-release:
    name: Build Release Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment:
          - inkplate10
          - inkplate10v2
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for release notes
          
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Cache PlatformIO
        uses: actions/cache@v4
        with:
          path: ~/.platformio
          key: ${{ runner.os }}-pio-${{ hashFiles('platformio.ini') }}
          restore-keys: |
            ${{ runner.os }}-pio-
            
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio
          
      - name: Install PlatformIO Libraries
        run: pio pkg install
        
      - name: Use example config
        run: cp src/config_example.h src/config.h
        
      - name: Get version from tag
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.tag }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"
          
      - name: Build firmware for ${{ matrix.environment }}
        run: pio run -e ${{ matrix.environment }}
        
      - name: Rename firmware binary
        run: |
          cp .pio/build/${{ matrix.environment }}/firmware.bin \
             homeplate-${{ steps.version.outputs.version }}-${{ matrix.environment }}.bin
          
      - name: Upload firmware artifact
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ matrix.environment }}
          path: homeplate-${{ steps.version.outputs.version }}-${{ matrix.environment }}.bin
          retention-days: 90

  create-release:
    name: Create GitHub Release
    needs: build-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for release notes
          
      - name: Get version from tag
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.tag }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
          
      - name: Download all firmware artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          
      - name: Display structure of downloaded files
        run: ls -R ./artifacts
        
      - name: Generate release notes
        id: release_notes
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ steps.version.outputs.version }}';
            
            // Get the previous tag
            let previousTag;
            try {
              const tags = await github.rest.repos.listTags({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 100
              });
              
              const currentTagIndex = tags.data.findIndex(tag => tag.name === version);
              previousTag = currentTagIndex < tags.data.length - 1 
                ? tags.data[currentTagIndex + 1].name 
                : tags.data[tags.data.length - 1].name;
            } catch (error) {
              console.log('Could not find previous tag, using first commit');
              previousTag = '';
            }
            
            // Get commits between tags
            let commits = [];
            if (previousTag) {
              const comparison = await github.rest.repos.compareCommits({
                owner: context.repo.owner,
                repo: context.repo.repo,
                base: previousTag,
                head: version
              });
              commits = comparison.data.commits;
            } else {
              // Get all commits if no previous tag
              const allCommits = await github.rest.repos.listCommits({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 100
              });
              commits = allCommits.data;
            }
            
            // Get merged PRs
            const prs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              sort: 'updated',
              direction: 'desc',
              per_page: 100
            });
            
            const mergedPRs = prs.data.filter(pr => {
              if (!pr.merged_at) return false;
              const mergedDate = new Date(pr.merged_at);
              const versionDate = new Date();
              if (previousTag) {
                // Check if PR was merged after previous tag
                return commits.some(commit => commit.sha === pr.merge_commit_sha);
              }
              return true;
            });
            
            // Categorize changes
            const features = [];
            const bugfixes = [];
            const improvements = [];
            const others = [];
            
            mergedPRs.forEach(pr => {
              const title = pr.title;
              const prLink = `[#${pr.number}](${pr.html_url})`;
              const item = `- ${title} ${prLink}`;
              
              if (title.toLowerCase().includes('feat') || title.toLowerCase().includes('feature') || pr.labels.some(l => l.name === 'enhancement')) {
                features.push(item);
              } else if (title.toLowerCase().includes('fix') || title.toLowerCase().includes('bug') || pr.labels.some(l => l.name === 'bug')) {
                bugfixes.push(item);
              } else if (title.toLowerCase().includes('improve') || title.toLowerCase().includes('refactor') || title.toLowerCase().includes('perf')) {
                improvements.push(item);
              } else {
                others.push(item);
              }
            });
            
            // If no PRs, categorize by commits
            if (mergedPRs.length === 0) {
              commits.forEach(commit => {
                const message = commit.commit.message.split('\n')[0];
                const sha = commit.sha.substring(0, 7);
                const item = `- ${message} (\`${sha}\`)`;
                
                if (message.toLowerCase().includes('feat') || message.toLowerCase().includes('feature')) {
                  features.push(item);
                } else if (message.toLowerCase().includes('fix') || message.toLowerCase().includes('bug')) {
                  bugfixes.push(item);
                } else if (message.toLowerCase().includes('improve') || message.toLowerCase().includes('refactor') || message.toLowerCase().includes('perf')) {
                  improvements.push(item);
                } else {
                  others.push(item);
                }
              });
            }
            
            // Build release notes
            let releaseNotes = `# Release ${version}\n\n`;
            
            if (previousTag) {
              releaseNotes += `**Full Changelog**: https://github.com/${context.repo.owner}/${context.repo.repo}/compare/${previousTag}...${version}\n\n`;
            }
            
            releaseNotes += `## 📦 Installation\n\n`;
            releaseNotes += `Download the appropriate firmware binary for your device:\n`;
            releaseNotes += `- \`homeplate-${version}-inkplate10.bin\` - For Inkplate 10\n`;
            releaseNotes += `- \`homeplate-${version}-inkplate10v2.bin\` - For Inkplate 10 v2\n\n`;
            releaseNotes += `Flash using PlatformIO or ESPTool:\n`;
            releaseNotes += `\`\`\`bash\n`;
            releaseNotes += `# Using esptool.py\n`;
            releaseNotes += `esptool.py --port /dev/ttyUSB0 write_flash 0x10000 homeplate-${version}-inkplate10.bin\n\n`;
            releaseNotes += `# Or use PlatformIO OTA update (if already running HomePlate)\n`;
            releaseNotes += `# Update the version in platformio.ini and run:\n`;
            releaseNotes += `pio run -e ota -t upload\n`;
            releaseNotes += `\`\`\`\n\n`;
            
            if (features.length > 0) {
              releaseNotes += `## ✨ New Features\n\n${features.join('\n')}\n\n`;
            }
            
            if (bugfixes.length > 0) {
              releaseNotes += `## 🐛 Bug Fixes\n\n${bugfixes.join('\n')}\n\n`;
            }
            
            if (improvements.length > 0) {
              releaseNotes += `## 🔧 Improvements\n\n${improvements.join('\n')}\n\n`;
            }
            
            if (others.length > 0) {
              releaseNotes += `## 📝 Other Changes\n\n${others.join('\n')}\n\n`;
            }
            
            releaseNotes += `---\n\n`;
            releaseNotes += `**Total commits**: ${commits.length}\n`;
            if (mergedPRs.length > 0) {
              releaseNotes += `**Merged pull requests**: ${mergedPRs.length}\n`;
            }
            
            return releaseNotes;
          result-encoding: string
          
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: HomePlate ${{ steps.version.outputs.version }}
          body: ${{ steps.release_notes.outputs.result }}
          draft: false
          prerelease: false
          files: |
            ./artifacts/firmware-inkplate10/homeplate-${{ steps.version.outputs.version }}-inkplate10.bin
            ./artifacts/firmware-inkplate10v2/homeplate-${{ steps.version.outputs.version }}-inkplate10v2.bin
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

