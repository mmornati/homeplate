name: Build and Test

on:
  push:
    branches: [ "main", "bugfix/*", "feature/*" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch: # allow manually calling the action

jobs:
  # Run unit tests first
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Cache PlatformIO
        uses: actions/cache@v4
        with:
          path: ~/.platformio
          key: ${{ runner.os }}-pio-${{ hashFiles('platformio.ini') }}
          restore-keys: |
            ${{ runner.os }}-pio-
            
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio
          
      - name: Install PlatformIO Libraries
        run: pio pkg install
        
      - name: Use example config
        run: cp src/config_example.h src/config.h
        
      - name: Run Unit Tests
        run: pio test -e native -v
        
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: .pio/test/
          retention-days: 30

  # Build for all ESP32 environments
  build:
    name: Build (${{ matrix.environment }})
    runs-on: ubuntu-latest
    needs: test
    strategy:
      fail-fast: false
      matrix:
        environment:
          - inkplate10
          - inkplate10v2
          - debug
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Cache PlatformIO
        uses: actions/cache@v4
        with:
          path: ~/.platformio
          key: ${{ runner.os }}-pio-${{ hashFiles('platformio.ini') }}
          restore-keys: |
            ${{ runner.os }}-pio-
            
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio
          
      - name: Install PlatformIO Libraries
        run: pio pkg install
        
      - name: Use example config
        run: cp src/config_example.h src/config.h
        
      - name: Build firmware for ${{ matrix.environment }}
        run: pio run -e ${{ matrix.environment }}
        
      - name: Upload firmware artifact
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ matrix.environment }}
          path: .pio/build/${{ matrix.environment }}/firmware.bin
          retention-days: 30
          
      - name: Check firmware size
        run: |
          pio run -e ${{ matrix.environment }} -t size
          
  # Code quality checks
  check:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Cache PlatformIO
        uses: actions/cache@v4
        with:
          path: ~/.platformio
          key: ${{ runner.os }}-pio-${{ hashFiles('platformio.ini') }}
          restore-keys: |
            ${{ runner.os }}-pio-
            
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio
          
      - name: Install PlatformIO Libraries
        run: pio pkg install
        
      - name: Use example config
        run: cp src/config_example.h src/config.h
        
      - name: Run static analysis (cppcheck)
        run: pio check -e inkplate10 --skip-packages --fail-on-defect=medium
        continue-on-error: true
        
  # Summary job
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [test, build, check]
    if: always()
    steps:
      - name: Check if all jobs passed
        run: |
          if [ "${{ needs.test.result }}" != "success" ] || \
             [ "${{ needs.build.result }}" != "success" ]; then
            echo "One or more required jobs failed"
            exit 1
          fi
          echo "All CI checks passed successfully!"
